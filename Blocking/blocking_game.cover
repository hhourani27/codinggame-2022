    1: import numpy as np
    1: import random as rd
    1: import copy
       
    1: board_is_side_of_player_cache = {}
    1: tracer = [0]*10
       
    2: class Shape :
    1:     def __init__(self, letter, flip, rotate, shape_flat_str, row, col):
  189:         self.letter = letter
  189:         self.flip = flip
  189:         self.rotate = rotate
  189:         self.symbol = '{}{}{}'.format(letter,flip,rotate)
 1557:         self.size = max([int(c) for c in list(shape_flat_str) if c.isdigit()])
               
               # Generate np matrix, flip or rotate it if required
  189:         matrix = np.reshape(list(shape_flat_str),(row,col))
  189:         if flip == 1 :
   84:             matrix = np.rot90(np.fliplr(matrix))
  189:         matrix = np.rot90(matrix,k=4-rotate)
  189:         self.matrix = matrix
              
  189:         self.row = self.matrix.shape[0]
  189:         self.col = self.matrix.shape[1]
               
               # String representations
  189:         self.flat_string = ''.join(matrix.flatten())
               
  189:         flat_hash = self.flat_string
 1368:         for c in flat_hash:
 1179:             if c.isdigit():
  801:                 flat_hash = flat_hash.replace(c,'#')
  189:         self.flat_hash = flat_hash
               
               # A list of positions that this shape fills, by starting number
  189:         self.positions = {}
               
  189:         initial_positions = []
  660:         for x in range(self.row):
 1650:             for y in range(self.col):
 1179:                 if self.matrix[x][y] != '.':
  801:                     initial_positions.append((x,y))
                           
  660:         for x in range(self.row):
 1650:             for y in range(self.col):
 1179:                 if self.matrix[x][y] != '.':
  801:                     n = self.matrix[x][y]
 5229:                     self.positions[int(n)] = [(p[0]-x, p[1]-y) for p in initial_positions]
                   
       
       
           # Return a list of all possible non-rotated non-flipped shapes
    1:     @staticmethod
    1:     def get_all_shapes():
    1:         return {
    1:             'A' : Shape('A',0,0,'1',1,1),
    1:             'B' : Shape('B',0,0,'12',1,2),
    1:             'C' : Shape('C',0,0,'123',1,3),
    1:             'D' : Shape('D',0,0,'123.',2,2),
    1:             'E' : Shape('E',0,0,'1234',1,4),
    1:             'F' : Shape('F',0,0,'1234..',2,3),
    1:             'G' : Shape('G',0,0,'123.4.',2,3),
    1:             'H' : Shape('H',0,0,'1234',2,2),
    1:             'I' : Shape('I',0,0,'12..34',2,3),
    1:             'J' : Shape('J',0,0,'12345',1,5),
    1:             'K' : Shape('K',0,0,'12345...',2,4),
    1:             'L' : Shape('L',0,0,'1234.5..',2,4),
    1:             'M' : Shape('M',0,0,'123...45',2,4),
    1:             'N' : Shape('N',0,0,'12345.',2,3),
    1:             'O' : Shape('O',0,0,'1234.5',2,3),
    1:             'P' : Shape('P',0,0,'1234..5..',3,3),
    1:             'Q' : Shape('Q',0,0,'123.4..5.',3,3),
    1:             'R' : Shape('R',0,0,'12..3..45',3,3),
    1:             'S' : Shape('S',0,0,'12..34..5',3,3),
    1:             'T' : Shape('T',0,0,'12..34.5.',3,3),
    1:             'U' : Shape('U',0,0,'.1.234.5.',3,3)
                   }
       
           # Returns all possible shape orientations as a dict of {shape orientation symbol: Shape object}
           # If multiple shape orientations result in the same shape, only return the first one
    1:     @staticmethod
    1:     def get_all_shape_orientations(shape):
               
   21:         assert shape.flip==0 and shape.rotate==0, "Provide a non-flipped non-rotated shape"
               
   21:         shape_orientations = {}
   21:         shape_hashes = set()
               
   63:         for flip in [0,1]:
  210:             for rotate in [0,1,2,3]:
  168:                 shape_o = Shape(shape.letter, flip, rotate, shape.flat_string, shape.row, shape.col)
  168:                 shape_o_hash = (shape_o.row,shape_o.col,shape_o.flat_hash)
  168:                 if shape_o_hash not in shape_hashes:
   91:                     shape_orientations[shape_o.symbol] = shape_o
   91:                     shape_hashes.add(shape_o_hash)
                           
   21:         return shape_orientations
           
    1:     @staticmethod
    1:     def get_all_shapes_orientations():
               result = {}
               
               shapes = Shape.get_all_shapes()
               for shape in shapes.values():
                   s_or = Shape.get_all_shape_orientations(shape)
                   result = {**result,**s_or}
                   
               return result
       
    2: class BlockingGame:
    1:     def __init__(self, nb_players):
               # Initialize board
    1:         self.N = 13
    1:         self.board = np.full((self.N,self.N),'.')
               
               # Initialize shapes
    1:         self.shape_letters = list('ABCDEFGHIJKLMNOPQRSTU')
    1:         self.shapes = Shape.get_all_shapes()
   23:         self.shapes_oriented = {s.letter:list(Shape.get_all_shape_orientations(s).values()) for s in self.shapes.values()}
               
               # Initialize players
    1:         assert nb_players in [2,3,4], "The number of players must be between 1 and 3"
    1:         self.nb_players = nb_players
               
    1:         self.nb_shapes_per_player = 18 if self.nb_players == 2 else 13 if self.nb_players == 3 else 10
    1:         self.allowed_shape_letters = self.shape_letters[:4] + rd.sample(self.shape_letters[4:],self.nb_shapes_per_player-4)
    1:         self.allowed_shape_letters.sort()
               
    5:         self.players = [
    2:             {
    2:                 'id': i,
    2:                 'shapes': self.allowed_shape_letters.copy(),
    2:                 'score' : 0,
    2:                 'past_moves': [],
    2:                 'valid_moves': [],
    2:                 'first_play' : True,
    2:                 'dead' : False
                    }
    1:             for i in range(self.nb_players)
                   ]
               
               # Initialize game run
    1:         self.active_game = True
    1:         self.active_player_id = 0
    1:         self.turn_nb = 1
               
               
               # Add valid moves for the first player
    1:         first_player = self.players[self.active_player_id]
    1:         valid_shapes = self.get_shapes(first_player['shapes'])
    1:         connected_positions = BlockingGame.get_well_connected_positions(self.board, self.N, self.active_player_id)
    1:         valid_moves = BlockingGame.get_valid_moves(self.board, self.N, self.active_player_id, valid_shapes, connected_positions)
    1:         first_player['valid_moves'] = valid_moves
               
               
    1:         self.history = []
       
       
    1:     def turn(self):
   25:         out = []
   25:         pid = self.active_player_id
   25:         player = self.players[self.active_player_id]
               
               # Output if it's the first turn
   25:         if player['first_play']:
    2:             out.append(str(self.nb_shapes_per_player))
   38:             for i in range(self.nb_shapes_per_player):
   36:                 shape = self.shapes[self.allowed_shape_letters[i]]
   72:                 out.append(' '.join([
   36:                     shape.letter,
   36:                     str(shape.col),
   36:                     str(shape.row),
   36:                     shape.flat_string
                           ]))
    2:             out.append(str(self.nb_players))
    2:             out.append(str(pid))
    2:             out.append(str(self.N))
    2:             out.append(''.join(self.allowed_shape_letters))
               
               # Output on each turn
   25:         connected_positions = BlockingGame.get_well_connected_positions(self.board, self.N, pid)
               
   25:         out.extend(BlockingGame.board_to_string(self.board, connected_positions))
               
   25:         last_moves = self.get_last_moves(pid)
   25:         out.append(str(len(last_moves)))
   49:         for move in last_moves:
   24:             out.append(str(pid) + ' ' + ' '.join(move))
               
   25:         valid_moves = player['valid_moves']
   25:         out.append(str(len(valid_moves)))
 3231:         for move in valid_moves :
 3206:             out.append('{} {} {}'.format(str(move[1]),str(move[0]), move[2]))
               
   25:         return (self.active_player_id,out)
               
           # Returns True if game is still going and False if the game stopped
    1:     def move(self, text):        
               # Extract move information
   25:         move = text.split()
               
   25:         y = int(move[0])
   25:         x = int(move[1])
               
   25:         shape_symbol = move[2][:3]
   25:         shape_letter = shape_symbol[0]
   25:         n = int(move[2][3])
               
   25:         player = self.players[self.active_player_id]
   25:         shape = self.get_shape(shape_symbol)
               
   25:         is_move_legal = True
   25:         if shape_letter not in player['shapes']:
                   is_move_legal = False
   25:         elif self.nb_players == 3 and player['first_play'] == True and self.active_player_id in [0,1] and shape_letter not in ['A','B','C','D']:
                   is_move_legal = False
   25:         elif not BlockingGame.is_valid_move(self.board, self.N, self.active_player_id, shape, x, y, n):
                   is_move_legal = False
                   
   25:         if is_move_legal == False:
                   self.kill_player(self.active_player_id)
               else:
   25:             BlockingGame.place_shape_on_board(self.board, x, y, shape, n, self.active_player_id)
   25:             player['past_moves'].append(move)
   25:             player['first_play'] = False
   25:             player['score'] = player['score'] + shape.size
   25:             player['shapes'].remove(shape_letter)
                   
   25:             if len(player['shapes']) == 0:
                       self.kill_player(self.active_player_id) 
                
   25:         self.record_turn(text)
               
   25:         self.turn_nb += 1
   25:         self.set_next_player()
               
               
   25:         return self.active_game
               
                       
    1:     def set_next_player(self):
               
   25:         next_player_id = (self.active_player_id + 1) % self.nb_players
   25:         pids = list(range(self.nb_players))
   25:         pids = pids[next_player_id:] + pids[:next_player_id]
               
   32:         for next_player_id in pids:
   31:             next_player = self.players[next_player_id]            
   31:             if next_player['dead'] == True:
    5:                 continue
                   
   26:             valid_shapes = self.get_shapes(next_player['shapes'])
   26:             connected_positions = BlockingGame.get_well_connected_positions(self.board, self.N, next_player_id)
   26:             valid_moves = BlockingGame.get_valid_moves(self.board, self.N, next_player_id, valid_shapes, connected_positions)
   26:             next_player['valid_moves'] = valid_moves
                   
   26:             if len(valid_moves) == 0:
    2:                 self.kill_player(next_player_id)
    2:                 continue
                   
   24:             self.active_player_id = next_player_id
   24:             return
               
    1:         self.active_game = False
       
    1:     def kill_player(self,player_id):
    2:         self.players[player_id]['dead'] = True            
                   
               
           # Return the shape object from the shape_symbol
    1:     def get_shape(self, shape_symbol):
   25:         sletter = shape_symbol[0]
   25:         shapes_or = self.shapes_oriented[sletter]
               
  175:         return [s for s in shapes_or if s.symbol==shape_symbol][0]
           
           # Return all shape objects for all shape letters
    1:     def get_shapes(self, shape_letters):
   27:         shapes = []
  338:         for sletter in shape_letters:
  311:             shapes.extend(self.shapes_oriented[sletter])
                   
   27:         return shapes
           
    1:     def get_winners(self):
    1:         assert self.active_game == False, 'Can\'t get winners. Game is still running'
               
    4:         max_score = max([p['score'] for p in self.players])
               
    4:         return [p['id'] for p in self.players if p['score'] == max_score]
               
       
    1:     def record_turn(self, move):
   25:         record = {}
   25:         record['turn'] = self.turn_nb
   25:         record['move'] = move
   25:         record['board'] = ''.join(self.board.flatten())
   25:         record['active_player'] = self.active_player_id
   25:         players = copy.deepcopy(self.players)
   75:         for p in players:
   50:             del p['past_moves']
   50:             del p['first_play']
   50:             del p['valid_moves']
               
   25:         record['players'] = players
               
   25:         self.history.append(record)
               
    1:     def get_record(self):
               
    1:         assert self.active_game == False, 'Can\'t get record. Game is still running' 
               
    1:         record = {}
    1:         record['board'] = {
    1:             'size' : self.N,
    1:             'style': {
    1:                 '.' : [0,0,0],
    1:                 '0' : [0,0,255],
    1:                 '1' : [255,0,0],
    1:                 '2' : [0,255,0],
    1:                 '3' : [255,255,0]
                       }
                   }
    1:         record['nb_players'] = self.nb_players
    1:         record['winners'] = self.get_winners()
    1:         record['turns'] =  self.history
               
    1:         return record
               
    1:     @staticmethod
           # Returns a list of well connected positions x where the user can put his block
           # board : a np array representing the board with '0', '1', '2', '3' '.' as possible cell values
           # player_id : int
    1:     def get_well_connected_positions(board,board_size,player_id):
               # If it's the first turn for the player
   77:         if str(player_id) not in board:
   12:             return {
    6:                 0 : [(0,0)],
    6:                 1 : [(board_size-1, board_size-1)],
    6:                 2 : [(board_size-1, 0)],
    6:                 3 : [(0,board_size-1)]
    6:                 }[player_id]
               
   71:         well_connected_positions = []
  994:         for x in range(board_size):
12922:             for y in range(board_size):
11999:                 if board[x][y] == '.':
 7989:                     if (str(player_id) in BlockingGame.get_corners(board,board_size,x,y) 
 2501:                         and str(player_id) not in BlockingGame.get_sides(board,board_size,x,y)):
  542:                         well_connected_positions.append((x,y))
               
   71:         return well_connected_positions
           
           # Returns the cell content at the corners of (x,y) (exclude cells outside the board)            
    1:     @staticmethod
    1:     def get_corners(board,board_size,x,y):
47934:         return [board[x+d[0],y+d[1]] for d in [(-1,-1),(-1,1),(1,1),(1,-1)] if 0<=x+d[0]<=board_size-1 and 0<=y+d[1]<=board_size-1]
           
           # Returns the cell contents at the sides of (x,y) (exclude cells outside the board)            
    1:     @staticmethod
    1:     def get_sides(board,board_size,x,y):
24390:         return [board[x+d[0],y+d[1]] for d in [(-1,0),(0,1),(1,0),(0,-1)] if 0<=x+d[0]<=board_size-1 and 0<=y+d[1]<=board_size-1]
           
           
    1:     @staticmethod
    1:     def is_side_of_player_cached(board,board_size,x,y,player_id,board_hash):
               
53436:         key = (board_hash,x,y,player_id)
53436:         if key not in board_is_side_of_player_cache:
 1464:             value = BlockingGame.is_side_of_player(board,board_size,x,y,player_id)
 1464:             board_is_side_of_player_cache[key] = value
 1464:             return value
               else:
51972:             return board_is_side_of_player_cache[key]
               
           
    1:     @staticmethod
    1:     def is_side_of_player(board,board_size,x,y,player_id):
 1564:         sides = BlockingGame.get_sides(board, board_size, x, y)
 1564:         if str(player_id) in sides:
  588:             return True
  976:         return False
           
           # Represent board as a list of strings (each string corresponds to a row)
    1:     @staticmethod
    1:     def board_to_string(board,connected_positions=None):
   25:         output = board.tolist()
               
   25:         if connected_positions is not None:
  203:             for (x,y) in connected_positions:
  178:                 output[x][y] = 'x'
               
  375:         return [''.join(row) for row in output]
           
           # Return a list of valid moves (x,y,Q001)
           # Input : shapes : a list of all allowed shape orientations
    1:     @staticmethod
    1:     def get_valid_moves(board, board_size, player_id, shapes, connected_positions):
   27:         board_hash = ''.join(board.flatten())  
   27:         valid_moves = []
  219:         for (posx,posy) in connected_positions:
 8224:             for shape in shapes:
43680:                 for n in range(1,shape.size + 1):
35648:                     if BlockingGame.is_valid_move(board,board_size,player_id,shape,posx,posy,n,connected_positions,board_hash):
 3206:                         valid_moves.append([posx,posy,'{}{}'.format(shape.symbol, n)])
                               
   27:         return valid_moves
       
    1:     @staticmethod
    1:     def is_valid_move(board, board_size, player_id, shape, posx, posy, n, connected_positions=None, board_hash=None):
35673:         filled_positions_diff = shape.positions[n]
               # get the list of cells that will be filled by this shape
235642:         filled_positions_on_board = [(posx+fpdx, posy+fpdy) for (fpdx,fpdy) in filled_positions_diff]
               
72473:         for (fpbx,fpby) in filled_positions_on_board:
                   #tracer[0] += 1 
                   # Check if the shape doesn't go outside the board
69242:             if fpbx < 0 or fpbx >= board_size or fpby < 0 or fpby >= board_size:
                   #    tracer[1] += 1 
 5012:                 return False
                   # Check if the shape doesn't cover an existing shape
64230:             if board[fpbx,fpby] != '.':
                   #    tracer[2] += 1 
10694:                 return False
                   
                   # Check if the shape doesn't cover a side cell of the same player's shape
                   # If board_hash is provided, use it for faster query of is_side_of_player
53536:             if board_hash is not None:
53436:                if BlockingGame.is_side_of_player_cached(board, board_size, fpbx, fpby, player_id,board_hash):
                   #       tracer[3] += 1 
16736:                    return False
                   else:
  100:                 if BlockingGame.is_side_of_player(board, board_size, fpbx, fpby, player_id):
                   #        tracer[4] += 1 
                           return False
                   
               # Check if the user is putting a shape on at least one connected position
 3231:         if connected_positions is None :
                   #tracer[5] += 1 
   25:             connected_positions = BlockingGame.get_well_connected_positions(board, board_size, player_id)
20240:         if all([(fpbx,fpby) not in connected_positions for (fpbx,fpby) in filled_positions_on_board]):
                   #tracer[6] += 1 
                   return False
               #tracer[7] += 1     
 3231:         return True
           
           # Place the shape on board and modifies the board itself
           # Assumes that it is a valid move
    1:     @staticmethod
    1:     def place_shape_on_board(board,posx, posy, shape, n, player_id):
   25:         filled_positions_diff = shape.positions[n]
               # get the list of cells that will be filled by this shape
  150:         filled_positions_on_board = [(posx+fpdx, posy+fpdy) for (fpdx,fpdy) in filled_positions_diff]
               
  125:         for (x,y) in filled_positions_on_board:
  100:             board[x,y] = str(player_id)
       
           # Returns the last moves of the previous player
    1:     def get_last_moves(self, player_id):
   25:         last_moves = []
               
   25:         pid = (player_id + 1) % self.nb_players
   50:         while pid != player_id:
   25:             if len(self.players[pid]['past_moves']) > 0:
   24:                 last_moves.append(self.players[pid]['past_moves'][-1])
   25:             pid = (pid + 1) % self.nb_players
                   
   25:         return last_moves
       
       #%%
       
           
